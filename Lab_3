%Name: Jeremy Hong and Alexander Kinkade
%Date: 3/17/2015
%Class: EE 4800/6800 Intro to Electronic Warfare
%Lab 3
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Clean up
clear
clc
close all
%
%Constants from lab 1 & 2
%
c = 3*10^8;          %Speed of Light 3e8 m/sec
k = 1.38*10^-23;     %Boltzmann's constant 1.38e-23 watt-second/Kelvin
T_0 = 290;           %Standard reference temperature T_0 = 290 Kelvin
R_E = 6371000;       %radius of the Earth R_E = 6371 km
k_r = 4/3;           %refraction factor k_r = 4/3
R_RT_test = 75000;   %Test radar-to-target range R_RT_test = 75 km
%
%Radar Characteristics from lab 1 & 2
%

P_R = 125000;        %Peak transmit power P_R = 125 kW
G_RT = 36;           %Mainbeam gain G_RT = 36 dBi
f_c = 6000000000;    %Carrier Frequency f_c = 6 GHz
G_sp = 30;           %Signal processing gain G_sp = 30       
G_I = 32;            %Integration gain G_I = 32
F_R = 7;             %Receiver noise figure F_R = 7 dB
B_R = 30000000;      %Receiver processing bandwidth B_R = 30 MHz
L_R = 9;             %Total radar related losses L_R = 9 dB
SNR_dt = 14;         %Detection threshold SNR_dt = 14 dB
h_R = 3;             %Height h_R = 3 meters
%
%Target Characteristics
%
h_T = 500;         %Altitude h_T = 500 meters
sigma_radar = 0;   %radar cross section sigma_radar = 0 dBsm
%
%Self-Protection Jammer Characteristics
%
%P_J = 10;            %Peak transmit power P_J = 10 W
%G_JR = 2;            %Transmit antenna gain G_JR = 2 dBi
%B_J = 150;           %Jammer noise bandwidth B_J 150 MHz
%L_J = 13;            %Total Jammer-related losses L_J 13 dB
%
%Pre-Calculations
%
Wavelength = c/f_c;%Wavelength meters (m)
%
%Absolute Values
%
G_RT = 10^(G_RT/10);
F_R = 10^(F_R/10);
L_R = 10^(L_R/10);
SNR_dt = 10^(SNR_dt/10);
sigma_radar = 10^(sigma_radar/10);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp('Electronic Warfare Lab 3 Calculator')
%
%User Inputs
fprintf('\nInput the characteristics of the self protection jammer\n')
P_J = input('\nEnter the peak transmit power in W: ');                                   %10 W
G_JR = input('Enter the transmit antenna gain in the direction of the radar in dBi: '); %2 dBi
B_J = input('Enter the jammer noise bandwidth in MHz: ');                              %150 MHz
L_J = input('Enter the total jammer-related losses in dB: ');                          %13 dB

%Conversions:
P_J_absolute = P_J;
G_JR_absolute = 10^(G_JR/10);
B_J = B_J*10^6;
L_J_absolute = 10^(L_J/10);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Spacing
%Calculations
%%
%Compute the recieved jamming signal power (J) at R_RT_test
J_R = (P_J_absolute*G_JR_absolute*G_RT*Wavelength^2)/((4*pi)^2*R_RT_test^2*L_J_absolute);
J_R_dB = 10*log10(J_R);
%display
fprintf('\n\nRecieved jamming signal power: %d Watts\n',J_R)
fprintf('Recieved jamming signal power: %3.4f dBW\n',J_R_dB)
%%
%
%Plot (1)
range1 = 0:1:150000;
hold on
%single-pulse target signal power
J_R_Plot = (P_R*G_RT^2*Wavelength^2*sigma_radar)./((4*pi).^3*range1.^4*L_R);
%conversion to dB
J_R_Plot_dB = 10*log10(J_R_Plot);
plot(range1,J_R_Plot_dB,'r')
%radar reciever Noise Power 
N_Plot = F_R*k*T_0*B_R;
%Conversion to dB
N_dB_Plot = ones(1,150001)*10*log10(N_Plot);
plot(range1,N_dB_Plot,'--')
%Recieved jamming signal power
J_Plot = (P_J_absolute*G_RT*G_JR_absolute*Wavelength^2)./((4*pi).^2*range1.^2*L_J_absolute);
%Conversion to dB
J_Plot_dB = 10*log10(J_Plot);
plot(range1,J_Plot_dB)
%Legend
legend('S','N','J')
%Set Axis like plot 10-3
axis([0 150000 -175 80])
%Labels
title('Thermal noise power vs radar-to-target range') 
ylabel('Power (dBW)')
xlabel('Radar-to-target range (m)')
grid on
%%
fprintf('\n\n')
disp('Noise Jammer calculations')
%Compute the jamming noise power out of the radar reciever (J_N) at R_RT_test 
J_N = J_R*(B_R/B_J);
J_N_dB = 10*log10(J_N);
%display
fprintf('\nJamming noise power out of noise reciever: %d Watts\n',J_N)
fprintf('Jamming noise power out of noise reciever: %3.4f dBW\n',J_N_dB)
%%
%Compute the interference signal power at R_RT_test
I = N_Plot + J_N;
I_dB = 10*log10(I);
fprintf('\nInterference signal power: %d\n',I);
fprintf('Interference signal power: %3.4f dBW\n',I_dB);

%%
%Plot (2)
figure(2)
range1 = 0:1:150000;
hold on
%single-pulse target signal power
J_R_Plot = (P_R*G_RT^2*Wavelength^2*sigma_radar)./((4*pi).^3*range1.^4*L_R);
%conversion to dB
J_R_Plot_dB = 10*log10(J_R_Plot);
plot(range1,J_R_Plot_dB,'r')
%radar reciever Noise Power 
N_Plot = F_R*k*T_0*B_R;
%Conversion to dB
N_dB_Plot = ones(1,150001)*10*log10(N_Plot);
plot(range1,N_dB_Plot,'--')
%Recieved jamming signal power
J_Plot = (P_J_absolute*G_RT*G_JR_absolute*Wavelength^2)./((4*pi).^2*range1.^2*L_J_absolute);
%Conversion to dB
J_Plot_dB = 10*log10(J_Plot);
plot(range1,J_Plot_dB)
%Interference Signal Power
I_Plot = I;
I_Plot_dB = ones(1,150001)*10*log10(I);
plot(range1,I_Plot_dB,':')
%Legend
legend('S','N','J','JN')
%Set Axis like plot 10-9
axis([0 150000 -175 80])
%Labels
title('Single-pluse target, radar reciever, recieved jamming and interference signal power vs radar-to-target range') 
ylabel('Power (dBW)')
xlabel('Radar-to-target range (m)')
grid on
%%
%Compute the multiple pulse target signal-to-interference ratio (S/I)_n at
%R_RT_test
MSIR = (P_R*G_RT^2*Wavelength^2*sigma_radar*G_sp*G_I)/((4*pi)^3*R_RT_test^4*L_R*(I));
MSIR_dB = 10*log10(MSIR);
fprintf('\nMultiple pulse target SIR: %4.3f absolute\n',MSIR)
fprintf('Multiple pulse target SIR: %4.3f dB\n',MSIR_dB)
%%
%Plot (3)
figure(3)
Range3 = 0:1:150000;
hold on
%Plot the detection threshold
dt_Plot_dB = ones(1,150001)*10*log10(SNR_dt);
plot(Range3,dt_Plot_dB,':')
%Plot the SNR
MSNR_Plot = (P_R*G_RT^2*Wavelength^2*sigma_radar*G_sp*G_I)./((4*pi)^3*Range3.^4*N_Plot*L_R);
%Conversion to dB
MSNR_Plot_dB = 10.*log10(MSNR_Plot);
plot(Range3,MSNR_Plot_dB,'--')
%Plot MSIR
MSIR_Plot = (P_R*G_RT^2*Wavelength^2*sigma_radar*G_sp*G_I)./((4*pi)^3*Range3.^4*L_R*I);
%Conversion to dB
MSIR_Plot_dB = 10.*log10(MSIR_Plot);
plot(Range3,MSIR_Plot_dB)
%Legend
legend('Detection Threshold','(S/N)_N','(S/I)_N')
%Set Axis like plot 10-10
axis([0 100000 0 90])
%Labels
title('MSNR, Detection Threshold, MSIR vs. the radar-to-target/Jammer range') 
ylabel('Power (dB)')
xlabel('Radar-to-target Range (m)')
grid on

%%
%Compute the burnthrough range (R_bt)
R_bt = sqrt(((P_R*G_RT^2*Wavelength^2*sigma_radar*G_sp*G_I)/((4*pi)*SNR_dt*L_R))*(L_J_absolute/(P_J*G_JR_absolute)));
fprintf('\nThe burnthrough range is: %4.3f meters\n',R_bt)
%% 
%Radar LOS and burnthrough range...
R_hC = sqrt(2*k_r*R_E*h_R+h_R^2);
R_hT = sqrt(2*k_r*R_E*h_T+h_T^2);
R_LOS = R_hC + R_hT;
fprintf('\nRadar line of sight: %3.3f meters \n\n',R_LOS);
%Radar is not LOS limited because R_bt < R_LOS
if R_bt < R_LOS
    disp('The Radar is not LOS limited for the self-protection noise jammer')
    fprintf('Because, R_bt is %4.3f meters, which is within the R_LOS of %4.3f meters\n',R_bt,R_LOS)
else
    disp('The Radar is LOS limited for the self_protection noise jammer')
end
%%
%Compute the multiple pulse noise jamming-to-target signal ratio (J_N/S)_n
%at R_RT_test
MJSNR = ((P_J*G_JR_absolute)/L_J_absolute)*(B_R/B_J)*(((4*pi)*R_RT_test^2*L_R)/(P_R*G_RT*sigma_radar*G_sp*G_I));
MJSNR_dB = 10*log10(MJSNR);
fprintf('\nCompute the MJSNR: %4.3f absolute\n',MJSNR);
fprintf('Compute the MJSNR: %4.3f dB\n',MJSNR_dB);
%%
%Plot (4)
figure(4)
Range4 = 0:1:150000;
hold on
%Plot MSIR
MJSNR_Plot = ((P_J*G_JR_absolute)/L_J_absolute).*(B_R/B_J).*(((4*pi)*Range4.^2*L_R)/(P_R*G_RT*sigma_radar*G_sp*G_I));
%Conversion to dB
MJSNR_Plot_dB = 10.*log10(MJSNR_Plot);
plot(Range4,MJSNR_Plot_dB)
%Legend
%Set Axis like plot 10-15
axis([0 100000 -50 0])
%Labels
title('Jamming-to-Signal Ratio as a function of Radar-to-Target/Jammer Range') 
ylabel('JSR (dB)')
xlabel('Radar-to-target Range (m)')
grid on
%%
%
fprintf('\n\nFalse Target Jammer Calculations\n')
%%
%Compute the multiple pulse false target jamming-to-noise ratio (J/N)_n at
%R_RT_test
MFJNR = (P_J*G_JR_absolute*G_RT*Wavelength^2*G_sp*G_I)/((4*pi)^2*R_RT_test^2*F_R*k*T_0*B_R*L_J_absolute);
MFJNR_dB = 10*log10(MFJNR);
fprintf('\nCompute the MFJNR: %4.3f absolute\n',MFJNR);
fprintf('Compute the MFJNR: %4.3f dB\n',MFJNR_dB);
%%
%Plot (5)
figure(5)
Range5 = 0:1:150000;
hold on
%Plot the detection threshold
dt_Plot_dB = ones(1,150001)*10*log10(SNR_dt);
plot(Range5,dt_Plot_dB,':')
%Plot the SNR
MSNR_Plot = (P_R*G_RT^2*Wavelength^2*sigma_radar*G_sp*G_I)./((4*pi)^3*Range5.^4*N_Plot*L_R);
%Conversion to dB
MSNR_Plot_dB = 10.*log10(MSNR_Plot);
plot(Range5,MSNR_Plot_dB,'--')
%Plot MSIR
MFJNR_Plot = (P_J*G_JR_absolute*G_RT*Wavelength^2*G_sp*G_I)./((4*pi)^2*Range5.^2*F_R*k*T_0*B_R*L_J_absolute);
%Conversion to dB
MFJNR_Plot_dB = 10.*log10(MFJNR_Plot);
plot(Range3,MFJNR_Plot_dB)
%Legend
legend('Detection Threshold','(S/N)_N','(J/N)_N')
%Set Axis like plot 10-10
axis([0 100000 0 90])
%Labels
title('Multiple-Pulse SNR, detection threshold, and JNR vs Radar-to-Target/Jammer Range') 
ylabel('Power (dB)')
xlabel('Radar-to-target Range (m)')
grid on
%%
%Compute the multiple pulse false target jamming-to-target signal ratio
%(J/S)_n at R_RT_test


%%
%Plot (6)

%%
%False target detection rage and LOS
